version: "3.8"

volumes:
  rabbitmq_data:
  redis_data:
  influxdb-storage:

networks:
  travel-local:
    driver: bridge

services:
  ###################################
  # Itinerary: The Itinerary microservice
  ###################################
  itinerary:
    build:
      context: ./dbServices/
      dockerfile: itinerary.Dockerfile
    image: lyihaoo/itinerary:travel-local
    restart: always
    command: gunicorn -w 4 --bind 0.0.0.0:5000 itinerary:app
    environment:
      dbURL: mysql+mysqlconnector://root@host.docker.internal:3306/travel_local_itinerary
      redisURL: redis://redis:6379/0
      PYTHONUNBUFFERED: 1
    deploy:
      replicas: 1 #change this number for how many replicated container to deploy
    ports:
      - "5000"
    depends_on:
      - redis
    networks:
      - travel-local
 
  #######################################################
  # Hiddengem: The Hiddengem microservice
  #######################################################
  hiddengem:
    build:
      context: ./dbServices/
      dockerfile: hiddengem.Dockerfile
    image: lyihaoo/hiddengem:travel-local
    restart: always
    command: gunicorn -w 4 --bind 0.0.0.0:5001 hiddengem:app
    environment:
      dbURL: mysql+mysqlconnector://root@host.docker.internal:3306/travel_local_hiddengem
      PYTHONUNBUFFERED: 1
    deploy:
      replicas: 1 #change this number for how many replicated container to deploy
    ports:
      - "5001"
    networks:
      - travel-local
  
  #######################################################
  # Recommendation: The Recommendation microservice
  #######################################################
  recommendation:
    build:
      context: ./dbServices/
      dockerfile: recommendation.Dockerfile
    image: lyihaoo/recommendation:travel-local
    restart: always
    command: gunicorn -w 4 --bind 0.0.0.0:5002 recommendation:app
    environment:
      dbURL: mysql+mysqlconnector://root@host.docker.internal:3306/travel_local_recommendation
      PYTHONUNBUFFERED: 1
    deploy:
      replicas: 1 #change this number for how many replicated container to deploy
    ports:
      - "5002"
    networks:
      - travel-local
  
  #######################################################
  # Log: The Log microservice
  #######################################################
  log:
    build:
      context: ./dbServices/
      dockerfile: log.Dockerfile
    image: lyihaoo/log:travel-local
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://root@host.docker.internal:3306/travel_local_log
      rabbitHost: rabbitmq
      rabbitPort: 5672
      PYTHONUNBUFFERED: 1
    deploy:
      replicas: 3 #change this number for how many replicated container to deploy
    depends_on:
      - rabbitmq
    networks:
      - travel-local
  
  #######################################################
  # Manage POI: The Manage POI microservice
  #######################################################
  manage-poi:
    build:
      context: ./complexServices/
      dockerfile: managePOI.Dockerfile
    image: lyihaoo/managepoi:travel-local
    restart: always
    command: gunicorn -w 4 --bind 0.0.0.0:5100 managePOI:app
    environment:
      rabbitHost: rabbitmq
      rabbitPort: 5672
      redisURL: redis://redis:6379/0
      itineraryURL: http://itinerary:5000/
      hgURL: http://hiddengem:5001/hiddengem
      PYTHONUNBUFFERED: 1
    deploy:
      replicas: 1 #change this number for how many replicated container to deploy
    ports:
      - "5100"
    depends_on:
      - rabbitmq
      - redis
    networks:
      - travel-local
  
  #######################################################
  # Manage POI: The Manage POI microservice
  #######################################################
  manage-itinerary:
    build:
      context: ./complexServices/
      dockerfile: manageItinerary.Dockerfile
    image: lyihaoo/manageitinerary:travel-local
    restart: always
    command: gunicorn -w 4 --bind 0.0.0.0:5200 manageItinerary:app
    environment:
      rabbitHost: rabbitmq
      rabbitPort: 5672
      redisURL: redis://redis:6379/0
      itineraryURL: http://itinerary:5000/
      recommendationURL: http://recommendation:5002/recommend/
      poiManagerURL: http://manage-poi:5100/search/
      PYTHONUNBUFFERED: 1
    deploy:
      replicas: 1 #change this number for how many replicated container to deploy
    ports:
      - "5200"
    depends_on:
      - rabbitmq
      - redis
    networks:
      - travel-local
  
  ####################################
  # RabbitMQ: The messaging broker   
  ####################################
  rabbitmq:
    image: rabbitmq:3-management
    hostname: travel-local-rabbit
    restart: always
    ports:
      - "5672"
      - "15672:15672"
    volumes: 
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - travel-local
  ####################################
  # Redis: The cache and Tyk database    
  ####################################
  redis:
    image: redis
    hostname: travel-local-redis
    restart: always
    ports:
      - "6379"
    volumes: 
      - redis_data:/var/lib/redis
    networks:
      - travel-local
  ######################################
  # Designer - GUI for configuring Kraken
  ######################################
  kraken_designer:
    image: devopsfaith/krakendesigner:latest
    ports:
      - 8787:80
    networks:
      - travel-local
  #####################################
  # Kraken_CE - The API Gateway
  #####################################
  krakend_ce:
    image: devopsfaith/krakend:1.3.0
    volumes:
      - ./krakend:/etc/krakend
    ports:
      - "8080:8080"
      - "8090:8090"
    networks:
      - travel-local
  #####################################
  # InfluxDB - DB for Gateway dashboard
  #####################################
  influxdb:
    image: influxdb:1.8
    ports:
      - "8086:8086"
    volumes:
      - influxdb-storage:/var/lib/influxdb
    environment:
      INFLUXDB_DB: krakend
      INFLUXDB_USER: letgo
      INFLUXDB_USER_PASSWORD: pas5w0rd
      INFLUXDB_ADMIN_USER: admin
      INFLUXDB_ADMIN_PASSWORD: supersecretpassword
    networks:
      - travel-local
  #####################################
  # Grafana - Dashboard for Gateway
  #####################################
  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    depends_on: 
      - influxdb
    volumes:
      - ./grafana_data:/var/lib/grafana
    networks:
      - travel-local